{"version":3,"sources":["logo.svg","components/FormView.js","components/Question.js","components/Search.js","components/QuestionView.js","components/Header.js","components/QuizView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FormView","props","submitQuestion","event","preventDefault","$","ajax","url","type","dataType","contentType","data","JSON","stringify","question","state","answer","difficulty","category","xhrFields","withCredentials","crossDomain","success","result","document","getElementById","reset","error","alert","handleChange","setState","target","name","value","categories","id","className","onSubmit","this","onChange","Object","keys","map","key","Component","Question","visibleAnswer","src","toLowerCase","onClick","questionAction","flipVisibility","style","Search","query","getInfo","submitSearch","handleInputChange","search","placeholder","ref","input","QuestionView","getQuestions","page","questions","totalQuestions","total_questions","currentCategory","current_category","getByCategory","searchTerm","action","window","confirm","num","pageNumbers","maxPage","Math","ceil","i","push","selectPage","width","height","q","ind","createPagination","Header","uri","location","href","origin","navTo","QuizView","selectCategory","quizCategory","getNextQuestion","previousQuestions","currentQuestion","previous_questions","quiz_category","showAnswer","guess","forceEnd","submitGuess","replace","evaluate","evaluateAnswer","numCorrect","restartGame","formatGuess","split","includes","length","renderFinalScore","renderCorrectAnswer","renderPlay","renderPrePlay","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.870a1d56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/FormView.css';\n\nclass FormView extends Component {\n  constructor(props){\n    super();\n    this.state = {\n      question: \"\",\n      answer: \"\",\n      difficulty: 1,\n      category: 1,\n      categories: {}\n    }\n  }\n\n  componentDidMount(){\n    $.ajax({\n      url: `/categories`,\n      type: \"GET\",\n      success: (result) => {\n        this.setState({ categories: result.categories })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again')\n        return;\n      }\n    })\n  }\n\n\n  submitQuestion = (event) => {\n    event.preventDefault();\n    $.ajax({\n      url: '/questions',\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        question: this.state.question,\n        answer: this.state.answer,\n        difficulty: this.state.difficulty,\n        category: this.state.category\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        document.getElementById(\"add-question-form\").reset();\n        return;\n      },\n      error: (error) => {\n        alert('Unable to add question. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  render() {\n    return (\n      <div id=\"add-form\">\n        <h2>Add a New Trivia Question</h2>\n        <form className=\"form-view\" id=\"add-question-form\" onSubmit={this.submitQuestion}>\n          <label>\n            Question\n            <input type=\"text\" name=\"question\" onChange={this.handleChange}/>\n          </label>\n          <label>\n            Answer\n            <input type=\"text\" name=\"answer\" onChange={this.handleChange}/>\n          </label>\n          <label>\n            Difficulty\n            <select name=\"difficulty\" onChange={this.handleChange}>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n            </select>\n          </label>\n          <label>\n            Category\n            <select name=\"category\" onChange={this.handleChange}>\n              {Object.keys(this.state.categories).map(id => {\n                  return (\n                    <option key={id} value={id}>{this.state.categories[id]}</option>\n                  )\n                })}\n            </select>\n          </label>\n          <input type=\"submit\" className=\"button\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default FormView;\n","import React, { Component } from 'react';\nimport '../stylesheets/Question.css';\n\nclass Question extends Component {\n  constructor(){\n    super();\n    this.state = {\n      visibleAnswer: false\n    }\n  }\n\n  flipVisibility() {\n    this.setState({visibleAnswer: !this.state.visibleAnswer});\n  }\n\n  render() {\n    const { question, answer, category, difficulty } = this.props;\n    return (\n      <div className=\"Question-holder\">\n        <div className=\"Question\">{question}</div>\n        <div className=\"Question-status\">\n          <img className=\"category\" src={`${category.toLowerCase()}.svg`}/>\n          <div className=\"difficulty\">Difficulty: {difficulty}</div>\n          <img src=\"delete.png\" className=\"delete\" onClick={() => this.props.questionAction('DELETE')}/>\n          \n        </div>\n        <div className=\"show-answer button\"\n            onClick={() => this.flipVisibility()}>\n            {this.state.visibleAnswer ? 'Hide' : 'Show'} Answer\n          </div>\n        <div className=\"answer-holder\">\n          <span style={{\"visibility\": this.state.visibleAnswer ? 'visible' : 'hidden'}}>Answer: {answer}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Question;\n","import React, { Component } from 'react'\n\nclass Search extends Component {\n  state = {\n    query: '',\n  }\n\n  getInfo = (event) => {\n    event.preventDefault();\n    this.props.submitSearch(this.state.query)\n  }\n\n  handleInputChange = () => {\n    this.setState({\n      query: this.search.value\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.getInfo}>\n        <input\n          placeholder=\"Search questions...\"\n          ref={input => this.search = input}\n          onChange={this.handleInputChange}\n        />\n        <input type=\"submit\" value=\"Submit\" className=\"button\"/>\n      </form>\n    )\n  }\n}\n\nexport default Search\n","import React, { Component } from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor(){\n    super();\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null,\n    }\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    $.ajax({\n      url: `/questions?page=${this.state.page}`,\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectPage(num) {\n    this.setState({page: num}, () => this.getQuestions());\n  }\n\n  createPagination(){\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {this.selectPage(i)}}>{i}\n        </span>)\n    }\n    return pageNumbers;\n  }\n\n  getByCategory= (id) => {\n    $.ajax({\n      url: `/categories/${id}/questions`,\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitSearch = (searchTerm) => {\n    $.ajax({\n      url: `/questions`,\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({searchTerm: searchTerm}),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  questionAction = (id) => (action) => {\n    if(action === 'DELETE') {\n      if(window.confirm('are you sure you want to delete the question?')) {\n        $.ajax({\n          url: `/questions/${id}`,\n          type: \"DELETE\",\n          success: (result) => {\n            this.getQuestions();\n          },\n          error: (error) => {\n            alert('Unable to load questions. Please try your request again')\n            return;\n          }\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"question-view\">\n        <div className=\"categories-list\">\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\n          <ul>\n            {Object.keys(this.state.categories).map((id, ) => (\n              <li key={id} onClick={() => {this.getByCategory(id)}}>\n                {this.state.categories[id]}\n                <img className=\"category\" src={`${this.state.categories[id].toLowerCase()}.svg`} width=\"20\" height=\"20\"/>\n              </li>\n            ))}\n          </ul>\n          <Search submitSearch={this.submitSearch}/>\n        </div>\n        <div className=\"questions-list\">\n          <h2>Questions</h2>\n          {this.state.questions.map((q, ind) => (\n            <Question\n              key={q.id}\n              question={q.question}\n              answer={q.answer}\n              category={this.state.categories[q.category]} \n              difficulty={q.difficulty}\n              questionAction={this.questionAction(q.id)}\n            />\n          ))}\n          <div className=\"pagination-menu\">\n            {this.createPagination()}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default QuestionView;\n","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport '../stylesheets/Header.css';\n\nclass Header extends Component {\n\n  navTo(uri){\n    window.location.href = window.location.origin + uri;\n  }\n\n  render() {\n    return (\n      <div className=\"App-header\">\n        <h1 onClick={() => {this.navTo('')}}>Udacitrivia</h1>\n        <h2 onClick={() => {this.navTo('')}}>List</h2>\n        <h2 onClick={() => {this.navTo('/add')}}>Add</h2>\n        <h2 onClick={() => {this.navTo('/play')}}>Play</h2>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5; \n\nclass QuizView extends Component {\n  constructor(props){\n    super();\n    this.state = {\n        quizCategory: null,\n        previousQuestions: [], \n        showAnswer: false,\n        categories: {},\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n    }\n  }\n\n  componentDidMount(){\n    $.ajax({\n      url: `/categories`,\n      type: \"GET\",\n      success: (result) => {\n        this.setState({ categories: result.categories })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectCategory = ({type, id=0}) => {\n    this.setState({quizCategory: {type, id}}, this.getNextQuestion)\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions]\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\n\n    $.ajax({\n      url: '/quizzes',\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: '',\n          forceEnd: result.question ? false : true\n        })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitGuess = (event) => {\n    event.preventDefault();\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    let evaluate =  this.evaluateAnswer()\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    })\n  }\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [], \n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    })\n  }\n\n  renderPrePlay(){\n      return (\n          <div className=\"quiz-play-holder\">\n              <div className=\"choose-header\">Choose Category</div>\n              <div className=\"category-holder\">\n                  <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\n                  {Object.keys(this.state.categories).map(id => {\n                  return (\n                    <div\n                      key={id}\n                      value={id}\n                      className=\"play-category\"\n                      onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\n                      {this.state.categories[id]}\n                    </div>\n                  )\n                })}\n              </div>\n          </div>\n      )\n  }\n\n  renderFinalScore(){\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\n      </div>\n    )\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n    return answerArray.includes(formatGuess)\n  }\n\n  renderCorrectAnswer(){\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    let evaluate =  this.evaluateAnswer()\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\n      </div>\n    )\n  }\n\n  renderPlay(){\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\n      ? this.renderFinalScore()\n      : this.state.showAnswer \n        ? this.renderCorrectAnswer()\n        : (\n          <div className=\"quiz-play-holder\">\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n            <form onSubmit={this.submitGuess}>\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange}/>\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\n            </form>\n          </div>\n        )\n  }\n\n\n  render() {\n    return this.state.quizCategory\n        ? this.renderPlay()\n        : this.renderPrePlay()\n  }\n}\n\nexport default QuizView;\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\n\n// import logo from './logo.svg';\nimport './stylesheets/App.css';\nimport FormView from './components/FormView';\nimport QuestionView from './components/QuestionView';\nimport Header from './components/Header';\nimport QuizView from './components/QuizView';\n\n\nclass App extends Component {\n  render() {\n    return (\n    <div className=\"App\">\n      <Header path />\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={QuestionView} />\n          <Route path=\"/add\" component={FormView} />\n          <Route path=\"/play\" component={QuizView} />\n          <Route component={QuestionView} />\n        </Switch>\n      </Router>\n    </div>\n  );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n //\"start\": \"HOST='127.0.0.1' PORT='5000' react-scripts start\",\n"],"sourceRoot":""}